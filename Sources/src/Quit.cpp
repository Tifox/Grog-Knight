/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 * under the License.
 */

/****
*** * File: Quit.cpp
* *** Creation: 2015-06-23 16:35
*** * Ne02ptzero <louis@ne02ptzero.me>
* *** lsolofri@e2r12p22.42.fr
****/

#include "Quit.hpp"

/**
 * Default constructor
 */
Quit::Quit(void) {
	return ;
}

/**
 * Destructor
 */
Quit::~Quit(void) {
	return ;
}

void	Quit::quitGame(void) {
	Menu		*menu = Game::currentGame->menu;
	Quit::writeBindings(menu->getBindings());
	exit(0);
}

void	Quit::writeBindings(std::map<std::string, std::list<t_bind *> > binds) {
	std::map<std::string, std::list<t_bind *> >::iterator	it;
	std::list<t_bind *>::iterator							it2;
	Json::Value												root;
	std::ofstream jsonFile, luaFile;

	if (binds.size() != 0) {
		jsonFile.open("Config/Bindings.json", std::ofstream::out | std::ofstream::trunc);
		luaFile.open("Config/input_bindings.ini", std::ofstream::out | std::ofstream::trunc);
		if (!jsonFile.is_open() || !luaFile.is_open()) {
			Log::error("A binding file is missing (Bindings.json / input_bindings.ini)");
		}
	
		jsonFile << "/* This file is generated by Grog-Like. DO NOT modify it. */" << std::endl;
		luaFile << "; This file is generated by Grog-Like. DO NOT modify it." << std::endl;
		for (it = binds.begin(); it != binds.end(); it++) {
			luaFile << ";; " << it->first << std::endl;
			for (it2 = it->second.begin(); it2 != it->second.end(); it2++) {
				// Json file
				root[it->first][(*it2)->name]["broadcast"] = (*it2)->broadcast;
					root[it->first][(*it2)->name]["key"] = (*it2)->realKey;

				// Lua file
				if (!Quit::isUpper((*it2)->broadcast)) {
					luaFile << "\t" << (*it2)->realKey << " = +" << (*it2)->broadcast << "Pressed" << std::endl;
					luaFile << "\t" << (*it2)->realKey << " = -" << (*it2)->broadcast << "Released" << std::endl;
				} else {
					luaFile << "\t" << (*it2)->realKey << " = " << (*it2)->broadcast << std::endl;
				}
			}
		}
		jsonFile << root << std::endl;
	}
}

int		Quit::isUpper(std::string s) {
	int		i;

	for (i = 0; i < s.size(); i++) {
		if (s[i] >= 'A' && s[i] <= 'Z')
			return 1;
	}
	return 0;
}

